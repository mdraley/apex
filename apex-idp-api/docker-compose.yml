# Docker Development Environment for Apex IDP Platform

networks:
  apex-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  kafka-data:
  zookeeper-data:
  minio-data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: apex-postgres
    environment:
      POSTGRES_DB: apex_idp
      POSTGRES_USER: apex_user
      POSTGRES_PASSWORD: apex_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apex_user -d apex_idp"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: apex-redis
    command: redis-server --appendonly yes --requirepass apex_redis_password
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: apex-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - apex-network
    restart: unless-stopped

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: apex-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka-data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: apex-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Apex API Gateway (Main Application)
  apex-api:
    build:
      context: .
      dockerfile: docker/services/api/Dockerfile.dev
    container_name: apex-api-gateway
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/apex_idp
      SPRING_DATASOURCE_USERNAME: apex_user
      SPRING_DATASOURCE_PASSWORD: apex_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: apex_redis_password
      APEX_STORAGE_MINIO_ENDPOINT: http://minio:9000
      APEX_STORAGE_MINIO_ACCESS_KEY: minioadmin
      APEX_STORAGE_MINIO_SECRET_KEY: minioadmin123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - .:/workspace
      - ~/.m2:/home/developer/.m2
    ports:
      - "8080:8080"
      - "5005:5005"  # Debug port
    networks:
      - apex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
